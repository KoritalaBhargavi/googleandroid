basics :-
fun main() {
    println("Hello, world!!!")
    
}
fun main() {
    println("1+2")
}


fun main() {
    println(1+2)
}


DATA TYPES:-

int size:any whole number
float size:0000.0000 to +9999.9999
double size:00000000.00000000
string size:can be of any size
boolean : 0 or 1



VARIABLE DECLARATION,INITIALIZATION:
val variable_name:datatype = value



TYPES OF VARIABLES:
1.val:similar to const
2.var:dynamic

Addition of two numbers:
fun main() {
    val num1:Int = 100
    val num2:Int = 200
    println(num1+num2)
}
Addition along with string concatenation with val :-
we use $ symbol to specify the value corresponding to the variable in double codes.
fun main() {
    val num1:Int = 100
    val num2:Int = 200
    val sum:Int = num1+num2
    print("$num1 added to $num2 sum is "+sum)
}

(or)

fun main() {
    val num1:Int = 100
    val num2:Int = 200
    print("$num1 added to $num2 sum is ${num1+num2}")
}

Addition along with string concatenation with val,inc,dec :-
fun main() {
    var num1:Int = 100
    var num2:Int = 200
    num1++
    num2--
    print("$num1 added to $num2 sum is ${num1+num2}")
}



FUNCTIONS:

-->function definition:
fun BakeCake(message:String, from:String, Qty:Int) {
    println("The message is : $message\nFrom: $from\nQyt is: $Qty")
}

-->function calling:
fun main() {
    //function calling
    BakeCake("Happy Birthday ciet","Eduskills",4)
}


RETURN TYPES:
1.void:returns nothing
2.String:returns string
3.Int:returns integer

Task1:
fun main() {
    print(type("Bhargavi",233.45643466,993.532f,21))
}

fun type(str:String,d:Double,f:Float,i:Int):String{
    return("The string value is : "+str+"\nThe double value is: "+d+"\nThe Float value is: "+f+"\nThe int value is: "+i)
}

CONTROL STATEMENTS:
-->if statement:
fun main() {
    val color= "Blue"
    if(color == "Blue") {
        println("Go")
    }
}

-->if else statement:-
fun main() {
    val color= "Blue"
    if(color == "Green") {
        println("Go")
    }
    else {
        println("NOT Understood:$color")
    }
}

-->else if statement:
fun main() {
    val color= "Red"
    if(color == "Green") {
        println("Go")
    }
    else if(color == "Yellow") {
        println("Slow Down")
    }
    else if(color == "Red") {
        println("Stop")
    }
    else{
        println("not understood")
    }
}

-->nested if-else statement:
fun main() {
    val color= "Red"
    val color1="Light Red"
    if(color == "Green") {
        println("Go")
    }
    else if(color == "Yellow") {
        println("Slow Down")
    }
    else if(color == "Red") {
       // println("Stop")
        if(color1 == "Light Red"){
            println("Display not clear")
        }
        else {
            println("Stop")
        }
    }
    else{
        println("not understood : $color")
    }
}

-->when statement:
fun main() {
    val color = "Orange"
    when(color) {
        "Green" -> println("Go")
        "Yellow","Orange" -> println("Slow Down")
        "Red" -> println("Stop")
	else -> println("Not understood")
    }
}



CLASSES:

class Cake {
    val num = 10
}
class Bake(val id:Int,val message:String) {
    
}

fun main() {
   val bake = Bake(10,"Happy Birthday")
   println(bake.id)   
}

